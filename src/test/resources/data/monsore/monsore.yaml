version: 0
application:
  name: MONSORE
  version: 1
references:
  especes:
    keyColumns: [esp_nom]
    columns:
      esp_nom:
      esp_definition_fr:
      esp_definition_en:
      colonne_homonyme_entre_referentiels:

  projet:
    keyColumns: [nom_key]
    columns:
      nom_key:
      nom_fr:
      nom_en:
      definition_fr:
      definition_en:
      colonne_homonyme_entre_referentiels:

  sites:
    validations:
      typeSitesRef:
        description: "référence au type de site"
        checker:
          name: Reference
          params:
            refType: type_de_sites
            columns: tze_type_nom
    keyColumns: [zet_chemin_parent,zet_nom_key]
    columns:
      tze_type_nom:
      zet_nom_key:
      zet_nom_fr:
      zet_nom_en:
      zet_description_fr:
      zet_description_en:
      zet_chemin_parent:

  themes:
    keyColumns: [nom_key]
    columns:
      nom_key:
      nom_fr:
      nom_en:
      description_fr:
      description_en:

  type de fichiers:
    keyColumns: [nom_key]
    columns:
      nom_key:
      nom_fr:
      nom_en:
      description_fr:
      description_en:

  type_de_sites:
    keyColumns: [tze_nom_key]
    columns:
      tze_nom_key:
      tze_nom_fr:
      tze_nom_en:
      tze_definition_fr:
      tze_definition_en:

  types_de_donnees_par_themes_de_sites_et_projet:
    validations:
      projetRef:
        description: "référence au projet"
        checker:
          name: Reference
          params:
            refType: projet
            columns: nom du projet
      sitesRef:
        description: "référence au site"
        checker:
          name: Reference
          params:
            refType: sites
            columns: nom du site
      themesRef:
        description: "référence au theme"
        checker:
          name: Reference
          params:
            refType: themes
            columns: nom du thème

      checkDatatype:
        description: "test"
        checker:
          name: GroovyExpression
          params:
            expression: >
              String datatype = Arrays.stream(datum.get("nom du type de données").split("_")).collect{it.substring(0, 1)}.join();
              return application.getDataType().contains(datatype);
    keyColumns: ["nom du projet","nom du site","nom du thème","nom du type de données" ]
    columns:
      nom du projet:
      nom du site:
      nom du thème:
      nom du type de données:

  unites:
    keyColumns: [nom_key]
    columns:
      code_key:
      code_fr:
      code_en:
      nom_key:
      nom_fr:
      nom_en:

  valeurs_qualitatives:
    keyColumns: [nom_key,valeur_key]
    columns:
      nom_key:
      nom_fr:
      nom_en:
      valeur_key:
      valeur_fr:
      valeur_en:

  variables:
    keyColumns: [nom_key]
    columns:
      nom_key:
      nom_fr:
      nom_en:
      definition_fr:
      definition_en:
      isQualitative:

  variables_et_unites_par_types_de_donnees:
    validations:
      variableRef:
        description: "référence à la variable"
        checker:
          name: Reference
          params:
            refType: variables
            columns: nom de la variable
      uniteRef:
        description: "référence à l'unité'"
        checker:
          name: Reference
          params:
            refType: unites
            columns: nom de l'unité
      checkDatatype:
        description: "test"
        checker:
          name: GroovyExpression
          params:
            expression: >
              String datatype = Arrays.stream(datum.get("nom du type de données").split("_")).collect{it.substring(0, 1)}.join();
              return application.getDataType().contains(datatype);
    keyColumns: [nom du type de données,nom de la variable]
    columns:
      nom du type de données:
      nom de la variable:
      nom de l'unité:

dataTypes:
  pem:
    data:
      projet:
        components:
          value:
            checker:
              name: Reference
              params:
                refType: projet
      site:
        components:
          bassin:
            checker:
              name: Reference
              params:
                refType: sites
          plateforme:
          chemin:
            defaultValue: >
              return datumByVariableAndComponent.get("site").get("bassin") +"__" +datumByVariableAndComponent.get("site").get("plateforme")
            checker:
              name: Reference
              params:
                refType: sites
      date:
        components:
          value:
            checker:
              name: Date
              params:
                pattern: dd/MM/yyyy
                required:
      espece:
        components:
          value:
            checker:
              name: Reference
              params:
                refType: especes
      Couleur des individus:
        components:
          value:
            checker:
              name: Reference
              params:
                refType: valeurs_qualitatives
          unit:
            defaultValue: "return \"sans_unite\""
            checker:
              name: Reference
              params:
                refType: unites
                required:
      Nombre d'individus:
        components:
          value:
            defaultValue: "return 0"
            checker:
              name: Integer
              params:
                required:
          unit:
            defaultValue: "return \"sans_unite\""
            checker:
              name: Reference
              params:
                refType: unites
                required:
    validations:
      unitOfColor:
        description: "vérifie l'unité de la couleur des individus"
        checker:
          name: GroovyExpression
          params:
            expression: >
              return referencesValues.get("variables_et_unites_par_types_de_donnees")
              .findAll{it.get("nom du type de données").equals(params.get("datatype"))}
              .find{it.get("nom de la variable").equals(params.get("codeVariable"))}
              .get("nom de l'unité").equals(datum.get(params.get("variable")).get(params.get("component")));
            references: variables_et_unites_par_types_de_donnees
            datatype: "piegeage_en_montee"
            variable: "Couleur des individus"
            codeVariable: couleur_des_individus
            component: unit
      unitOfIndividus:
        description: "vérifie l'unité du nombre d'individus"
        checker:
          name: GroovyExpression
          params:
            expression: >
              return referencesValues.get("variables_et_unites_par_types_de_donnees")
              .findAll{it.get("nom du type de données").equals(params.get("datatype"))}
              .find{it.get("nom de la variable").equals(params.get("codeVariable"))}
              .get("nom de l'unité").equals(datum.get(params.get("variable")).get(params.get("component")));
            references: variables_et_unites_par_types_de_donnees
            datatype: "piegeage_en_montee"
            variable: "Nombre d'individus"
            codeVariable: nombre_d_individus
            component: unit
    format:
      headerLine: 4
      firstRowLine: 5
      columns:
        - header: "projet"
          boundTo:
            variable: projet
            component: value
        - header: "site"
          boundTo:
            variable: site
            component: bassin
        - header: "plateforme"
          boundTo:
            variable: site
            component: plateforme
        - header: "date"
          boundTo:
            variable: date
            component: value
        - header: "espece"
          boundTo:
            variable: espece
            component: value
        - header: "Couleur des individus"
          boundTo:
            variable: Couleur des individus
            component: value
        - header: "Nombre d'individus"
          boundTo:
            variable: Nombre d'individus
            component: value
    authorization:
      authorizationScopes:
        localization:
          variable: site
          component: chemin
      timeScope:
        variable: date
        component: value
      dataGroups:
        referentiel:
          label: "Référentiel"
          data:
            - projet
            - site
            - date
            - espece
        qualitatif:
          label: "Données qualitatives"
          data:
            - Couleur des individus
        quantitatif:
          label: "Données quantitatives"
          data:
            - Nombre d'individus
